{"version":3,"sources":["htmlGenerators.js","GlowButton.js","App.js","serviceWorker.js","index.js"],"names":["generateNumericField","numericFieldsAccumulator","fieldName","fieldDisplayName","barStyle","GlowButton","children","onClick","className","type","defaultInputValues","FieldInput","fieldInputValue","onChange","style","display","padding","addonBefore","placeholer","value","target","App","useState","fieldInputValues","setFieldInputValues","onChangeInput","useCallback","newValue","i","updatedFieldInputValues","console","log","map","key","str","el","document","createElement","setAttribute","position","left","body","appendChild","select","execCommand","removeChild","copyToClipboard","fields","numericFields","reduce","generatePopupHTML","HeartTwoTone","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAsBMA,G,YAAuB,SAACC,EAAD,GAA8D,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,iBACnE,OAAOF,EAAwB,0HAEYE,EAFZ,gEAtBR,+DAsBQ,eAGwCD,EAHxC,sCAjBN,oIAiBM,mCAVf,SAACA,GAAD,0GAIEA,EAJF,qFAeKE,CAASF,GALC,sC,kBCrBnBG,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,QAAZ,OACzB,4BAAQC,UAAU,gBAAgBC,KAAK,SAASF,QAASA,GAAUD,ICO9DI,EAAqB,CACzB,CACER,UAAW,mBACXC,iBAAkB,kBAEpB,CACED,UAAW,eACXC,iBAAkB,wBAIhBQ,EAAa,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,SACpC,OACE,yBAAKC,MAAO,CAACC,QAAS,OAAQC,QAAS,KACrC,kBAAC,IAAD,CACEC,YAAY,cACZC,WAAY,oBACZC,MAAOP,EAAgBV,UACvBW,SAAU,gBAAEO,EAAF,EAAEA,OAAF,OAAcP,EAAS,eAAID,EAAL,CAAsBV,UAAWkB,EAAOD,YAE1E,kBAAC,IAAD,CACEF,YAAY,QACZC,WAAY,kCACZC,MAAOP,EAAgBT,iBACvBU,SAAU,gBAAEO,EAAF,EAAEA,OAAF,OAAcP,EAAS,eAAID,EAAL,CAAsBT,iBAAkBiB,EAAOD,cAsCxEE,MA/Bf,WAAgB,IAAD,EAEmCC,mBAASZ,GAF5C,mBAENa,EAFM,KAEYC,EAFZ,KAGPC,EAAgBC,uBAAY,SAACC,EAAUC,GAC3C,IAAMC,EAAuB,YAAON,GACpCM,EAAwBD,GAAKD,EAC7BH,EAAoBK,KACnB,CAACN,EAAkBC,IAGtB,OAFAM,QAAQC,IAAIrB,GAGV,yBAAKF,UAAU,OACb,6BACE,6EACCe,EAAiBS,KAAI,SAACpB,EAAiBgB,GAAlB,OACpB,kBAAC,EAAD,CACEK,IAAKL,EACLf,SAAU,SAAAc,GAAQ,OAAIF,EAAcE,EAAUC,IAC9ChB,gBAAiBA,OAErB,sDACA,kBAAC,EAAD,CAAYL,QAAS,kBFNE,SAAA2B,GAC9B,IAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGhB,MAAQe,EACXC,EAAGG,aAAa,WAAY,IAC5BH,EAAGrB,MAAMyB,SAAW,WACpBJ,EAAGrB,MAAM0B,KAAO,UAChBJ,SAASK,KAAKC,YAAYP,GAC1BA,EAAGQ,SACHP,SAASQ,YAAY,QACrBd,QAAQC,IAAI,wBACZK,SAASK,KAAKI,YAAYV,GEJQW,CF5BF,SAACC,GACjC,IAAMC,EAAgBD,EAAOE,OAAOjD,EAAsB,IAC1D,MAAM,2VAAN,OAOiBgD,EAPjB,qLE0BkDE,CAAkB3B,MAA7D,2BAGA,2BAAG,kBAAC4B,EAAA,EAAD,CAAcrC,MAAO,CAACsC,MAAO,SAAhC,aCrDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.61380ab1.chunk.js","sourcesContent":["\nconst fieldValueStyle = () => `\n        line-height: 1em;\n        font-size: 3em;\n      `\n\nconst barContainerStyle = () => `\n        width: 100%;\n        height: 12px;\n        border-radius: 4px;\n        background-color: rgba(10,10,10,0.1);\n      `\n\nconst barStyle = (fieldName) => `\n        border-radius: 4px;\n        height: 100%;\n        width: 0;\n        width: {{${fieldName}}}%;\n        transition: width 0.8s;\n        background-color: skyblue;\n      `\n\nconst generateNumericField = (numericFieldsAccumulator, {fieldName, fieldDisplayName}) => {\n\treturn numericFieldsAccumulator + `\n    <li class=\"CDB-infowindow-listItem\" style=\"min-height: 70px;\">\n      <h5 class=\"CDB-infowindow-subtitle\">${fieldDisplayName}</h5>\n      <h4 class=\"CDB-infowindow-title\" style=\"${fieldValueStyle()}\">{{${fieldName}}}</h4>\n      <div style=\"${barContainerStyle()}\">\n        <div style=\"${barStyle(fieldName)}\"/>\n      </div>\n    </li>\n  `\n}\n\nexport const generatePopupHTML = (fields) => {\n\tconst numericFields = fields.reduce(generateNumericField, '')\n\treturn `\n    <div class=\"CDB-infowindow CDB-infowindow--light js-infowindow\">\n      <div class=\"CDB-infowindow-close js-close\"></div>\n      <div class=\"CDB-infowindow-container\">\n        <div class=\"CDB-infowindow-bg\">\n          <div class=\"CDB-infowindow-inner js-inner\">\n            <ul class=\"CDB-infowindow-list js-content\">\n                ${numericFields}\n            </ul>\n          </div>\n        </div>\n        <div class=\"CDB-hook\">\n          <div class=\"CDB-hook-inner\"></div>\n        </div>\n      </div>\n    </div>\n  `\n}\n\n\nexport const copyToClipboard = str => {\n\tconst el = document.createElement('textarea');\n\tel.value = str;\n\tel.setAttribute('readonly', '');\n\tel.style.position = 'absolute';\n\tel.style.left = '-9999px';\n\tdocument.body.appendChild(el);\n\tel.select();\n\tdocument.execCommand('copy');\n\tconsole.log('Copied to clipboard!')\n\tdocument.body.removeChild(el);\n};\n\n","import React from 'react'\n\nexport const GlowButton = ({children, onClick}) => (\n\t<button className=\"glow-on-hover\" type=\"button\" onClick={onClick}>{children}</button>\n)\n","import React, {useState, useCallback} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {generatePopupHTML, copyToClipboard} from \"./htmlGenerators\";\nimport {Input} from \"antd\";\nimport {\n  HeartTwoTone\n} from '@ant-design/icons';\nimport {GlowButton} from \"./GlowButton\";\n\nconst defaultInputValues = [\n  {\n    fieldName: 'total_staff_100k',\n    fieldDisplayName: 'Staff per 100k',\n  },\n  {\n    fieldName: 'prep_score_1',\n    fieldDisplayName: 'County Preparedness',\n  },\n]\n\nconst FieldInput = ({fieldInputValue, onChange}) => {\n  return (\n    <div style={{display: 'flex', padding: 24}}>\n      <Input\n        addonBefore=\"CARTO Field\"\n        placeholer={\"eg state_pop_2018\"}\n        value={fieldInputValue.fieldName}\n        onChange={({target}) => onChange({...fieldInputValue, fieldName: target.value})}\n      />\n      <Input\n        addonBefore=\"Title\"\n        placeholer={\"eg The State Population in 2018\"}\n        value={fieldInputValue.fieldDisplayName}\n        onChange={({target}) => onChange({...fieldInputValue, fieldDisplayName: target.value})}\n      />\n    </div>\n  )\n}\n\n\nfunction App() {\n  \n  const [fieldInputValues, setFieldInputValues] = useState(defaultInputValues)\n  const onChangeInput = useCallback((newValue, i) => {\n    const updatedFieldInputValues = [...fieldInputValues]\n    updatedFieldInputValues[i] = newValue\n    setFieldInputValues(updatedFieldInputValues)\n  }, [fieldInputValues, setFieldInputValues])\n  console.log(defaultInputValues)\n  \n  return (\n    <div className=\"App\">\n      <div>\n        <h2>1. Specify the fields you want in your popup:</h2>\n        {fieldInputValues.map((fieldInputValue, i) => (\n          <FieldInput\n            key={i}\n            onChange={newValue => onChangeInput(newValue, i)}\n            fieldInputValue={fieldInputValue}/>)\n        )}\n        <h2>2. Copy it and bounce!</h2>\n        <GlowButton onClick={() => copyToClipboard(generatePopupHTML(fieldInputValues))}>\n          Copy HTML to clipboard!\n        </GlowButton>\n        <p><HeartTwoTone style={{color: 'red'}} /> David</p>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
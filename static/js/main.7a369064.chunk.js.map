{"version":3,"sources":["constants.js","htmlGenerators.js","GlowButton.js","FieldInputRow.js","DarkStyleSwitch.js","App.js","serviceWorker.js","index.js"],"names":["FIELD_TYPES","DEFAULT_INPUT_VALUES","fieldType","fieldName","fieldDisplayName","generateNumericField","numericFieldsAccumulator","isScore","isText","isGradient","listItemStyle","fieldWrapperStyle","fieldDisplayNameStyle","fieldValueStyle","barStyle","scoreBar","GlowButton","children","onClick","className","type","FieldInputRow","fieldInputValue","onChange","style","display","flex","addonBefore","placeholer","value","target","trim","defaultValue","Option","DarkStyleSwitch","isDarkStyle","onToggle","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","checked","App","useState","setIsDarkStyle","useCallback","fieldInputValues","setFieldInputValues","onChangeInput","newValue","i","updatedFieldInputValues","addNewInputField","length","justifyContent","map","key","size","PlusCircleOutlined","color","str","el","document","createElement","setAttribute","position","left","body","appendChild","select","execCommand","removeChild","copyToClipboard","fields","numericFields","reduce","generatePopupHTML","SmileOutlined","rotate","src","alt","maxWidth","HeartTwoTone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a369064.chunk.js","sourcesContent":["export const FIELD_TYPES = {\n\tscoreOutOf100: 'Score (0 to 100)',\n\tgradientOutOf100: 'Gradient(0 to 100)',\n\tnumber: 'Number',\n\ttext: 'Text'\n}\n\nexport const DEFAULT_INPUT_VALUES = [\n\t{\n\t\tfieldType: FIELD_TYPES.gradientOutOf100,\n\t\tfieldName: 'prep_level',\n\t\tfieldDisplayName: 'prep_score',\n\t},\n\t\n\t{\n\t\tfieldType: FIELD_TYPES.scoreOutOf100,\n\t\tfieldName: 'bed_score_1',\n\t\tfieldDisplayName: 'ICU Bed score',\n\t},\n\t{\n\t\tfieldType: FIELD_TYPES.scoreOutOf100,\n\t\tfieldName: 'staff_score_1',\n\t\tfieldDisplayName: 'Critical Staff score',\n\t},\n\t{\n\t\tfieldType: FIELD_TYPES.scoreOutOf100,\n\t\tfieldName: 'dem_score_1',\n\t\tfieldDisplayName: 'Demographic score',\n\t},\n\t{\n\t\tfieldType: FIELD_TYPES.scoreOutOf100,\n\t\tfieldName: 'se_score_1',\n\t\tfieldDisplayName: 'Socio-Economic score',\n\t},\n\t{\n\t\tfieldType: FIELD_TYPES.scoreOutOf100,\n\t\tfieldName: 'proj_score_1',\n\t\tfieldDisplayName: 'COVID-19 score',\n\t},\n\t\n\t\n\t{\n\t\tfieldType: FIELD_TYPES.number,\n\t\tfieldName: 'total_staff_100k',\n\t\tfieldDisplayName: 'Staff per 100k',\n\t},\n]\n\n\n\n\n\n\n","import {FIELD_TYPES} from \"./constants\";\n\n\nconst fieldDisplayNameStyle = (isText, isGradient) => isText ? '' : `\n\tposition: absolute;\n\tleft: 0px;\n\tbottom: 8px;\n\tfont-size: ${isGradient ? '16px' : '12px'};\n\t${isGradient ? 'font-style: bolder;' : ''}\n`\n\nconst fieldValueStyle = (isText, isGradient) => isText ? 'font-size: 1.5em' : `\n\tposition: absolute;\n\tright: 8px;\n\tbottom: 8px;\n\tline-height: 1em;\n\tfont-size: ${isGradient ? '3em' : '2em'};\n`\n\nconst barContainerStyle = () => `\n        width: 100%;\n        height: 8px;\n        border-radius: 4px;\n        background-color: rgba(10,10,10,0.6);\n      `\n\nconst barStyle = (fieldName) => `\n        border-radius: 4px;\n        height: 100%;\n        width: 0;\n        width: {{${fieldName}}}%;\n        transition: width 0.8s;\n        background-color: skyblue;\n      `\n\nconst fieldWrapperStyle = (isText, isGradient) => isText ? '' : `\n\tposition: relative;\n\tpadding-bottom: 4px;\n\tpadding-top: 4px;\n\t${isGradient ? 'height: 32px;' : ''}\n`\n\n\n\n\nconst scoreBar = fieldName => `\n\t\t\t<div style=\"${barContainerStyle()}\">\n        <div style=\"${barStyle(fieldName)}\"/>\n      </div>\n`\n\nconst generateGradientField = (gradientFieldName) => {\n\treturn `\n\t\t<div class='bar-container' style=\"\n                                  height: 12px;\n                                  border-radius: 4px;\n                                  position: relative;\n                                  background: linear-gradient(90deg , #cf597e , #e88471 , #eeb479 , #e9e29c , #9ccb86 , #39b185 , #009392);\n                                  \">\n    \t<div style=\"-webkit-transform: translateX(-12px)\">\n  \t\t\t<div class='bar' style=\"\n\t\t\t\t\tborder-radius: 0px;\n\t\t\t\t\theight: 0px;\n\t\t\t\t\twidth: 0px;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tleft: {{${gradientFieldName}}}%;\n\t\t\t\t\ttop: -8px;\n\t\t\t\t\tborder-left: 12px solid transparent;\n\t\t\t\t\tborder-right: 12px solid transparent;\n\t\t\t\t\tborder-top: 16px solid white;\n\t\t\t\t\t\"/>\n    \t</div>\n\t</div>\n\t\n\t`\n}\n\nconst listItemStyle = (isGradient) => isGradient ? `\n\tmin-height: 3em;\n\tmargin-top: 3em;\n` : ''\n\n\n\nconst generateNumericField = (numericFieldsAccumulator, {fieldName, fieldDisplayName, fieldType}) => {\n\tif (!fieldName || !fieldType) return numericFieldsAccumulator\n\t\n\tconst isScore = fieldType === FIELD_TYPES.scoreOutOf100\n\tconst isText = fieldType === FIELD_TYPES.text\n\tconst isGradient = fieldType === FIELD_TYPES.gradientOutOf100\n\treturn numericFieldsAccumulator + `\n    <li class=\"CDB-infowindow-listItem\" style=\"${listItemStyle(isGradient)}\">\n    \t<div style=\"min-height: 42px;\">\n\t\t\t\t<div style=\"${fieldWrapperStyle(isText)}\">\n\t\t\t\t\t<div class=\"CDB-infowindow-subtitle\" style=\"${fieldDisplayNameStyle(isText, isGradient)}\">${isGradient ? `{{${fieldName}}}` : fieldDisplayName}</div>\n\t\t\t\t\t<div class=\"CDB-infowindow-title\" style=\"${fieldValueStyle(isText, isGradient)}\">{{${isGradient ? fieldDisplayName : fieldName}}}</div>\n\t\t\t\t</div>\n\t\t\t\t${isScore ? scoreBar(fieldName) : (isGradient ? generateGradientField(fieldDisplayName) : '')}\n      </div>\n    </li>\n  `\n}\n\nexport const generatePopupHTML = (fields, isDarkStyle) => {\n\tconst numericFields = fields.reduce(generateNumericField, '')\n\treturn `\n    <div class=\"CDB-infowindow CDB-infowindow--${isDarkStyle ? 'dark' : 'light'} js-infowindow\">\n      <div class=\"CDB-infowindow-close js-close\"></div>\n      <div class=\"CDB-infowindow-container\">\n        <div class=\"CDB-infowindow-bg\">\n          <div class=\"CDB-infowindow-inner js-inner\">\n            <ul class=\"CDB-infowindow-list js-content\">\n                ${numericFields}\n            </ul>\n          </div>\n        </div>\n        <div class=\"CDB-hook\">\n          <div class=\"CDB-hook-inner\"></div>\n        </div>\n      </div>\n    </div>\n  `\n}\n\n\nexport const copyToClipboard = str => {\n\tconst el = document.createElement('textarea');\n\tel.value = str;\n\tel.setAttribute('readonly', '');\n\tel.style.position = 'absolute';\n\tel.style.left = '-9999px';\n\tdocument.body.appendChild(el);\n\tel.select();\n\tdocument.execCommand('copy');\n\tdocument.body.removeChild(el);\n};\n\n","import React from 'react'\n\nexport const GlowButton = ({children, onClick}) => (\n\t<button className=\"glow-on-hover\" type=\"button\" onClick={onClick}>{children}</button>\n)\n","import React from \"react\";\nimport {Input, Select} from \"antd\";\nimport {FIELD_TYPES} from \"./constants\";\n\n\nexport const FieldInputRow = ({fieldInputValue, onChange}) => {\n\tconst isGradient = fieldInputValue.fieldType === FIELD_TYPES.gradientOutOf100\n\treturn (\n\t\t<div className=\"field-input-container\" style={{display: 'flex'}}>\n\t\t\t<Input\n\t\t\t\tstyle={{flex: 2}}\n\t\t\t\taddonBefore={isGradient ? 'Gradient score' : 'Title'}\n\t\t\t\tplaceholer={isGradient ? \"eg The State Population in 2018\" : \"eg prep_score_1\"}\n\t\t\t\tvalue={fieldInputValue.fieldDisplayName}\n\t\t\t\tonChange={({target}) => onChange({...fieldInputValue, fieldDisplayName: target.value})}\n\t\t\t/>\n\t\t\t\n\t\t\t<Input\n\t\t\t\tstyle={{flex: 2}}\n\t\t\t\taddonBefore=\"CARTO Field\"\n\t\t\t\tplaceholer={\"eg state_pop_2018\"}\n\t\t\t\tvalue={fieldInputValue.fieldName}\n\t\t\t\tonChange={({target}) => onChange({...fieldInputValue, fieldName: target.value.trim()})}\n\t\t\t/>\n\t\t\t\n\t\t\t<Select\n\t\t\t\tstyle={{flex: 1}}\n\t\t\t\tdefaultValue={fieldInputValue.fieldType}\n\t\t\t\tclassName=\"field-type\"\n\t\t\t\tonChange={(fieldType) => onChange({...fieldInputValue, fieldType})}\n\t\t\t>\n\t\t\t\t<Select.Option value={FIELD_TYPES.scoreOutOf100}>{FIELD_TYPES.scoreOutOf100}</Select.Option>\n\t\t\t\t<Select.Option value={FIELD_TYPES.gradientOutOf100}>{FIELD_TYPES.gradientOutOf100}</Select.Option>\n\t\t\t\t<Select.Option value={FIELD_TYPES.number}>{FIELD_TYPES.number}</Select.Option>\n\t\t\t\t<Select.Option value={FIELD_TYPES.text}>{FIELD_TYPES.text}</Select.Option>\n\t\t\t</Select>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { Switch } from 'antd';\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\n\n\nexport const DarkStyleSwitch = ({isDarkStyle, onToggle}) => (\n\t<div className={`dark-style-switch ${isDarkStyle && 'is-dark-style'}`} style={{display: 'flex'}}>\n\t\t<div className={'text'}>Light style</div>\n\t\t<Switch\n\t\t\tcheckedChildren={<CheckOutlined />}\n\t\t\tunCheckedChildren={<CloseOutlined />}\n\t\t\tchecked={isDarkStyle}\n\t\t\tonClick={onToggle}\n\t\t/>\n\t\t<div className={'text'}>Dark style</div>\n\t</div>\n)\n","import React, {useCallback, useState} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {copyToClipboard, generatePopupHTML} from \"./htmlGenerators\";\nimport {Button} from \"antd\";\nimport {HeartTwoTone, PlusCircleOutlined, SmileOutlined} from '@ant-design/icons';\nimport {GlowButton} from \"./GlowButton\";\nimport {DEFAULT_INPUT_VALUES} from \"./constants\";\nimport {FieldInputRow} from \"./FieldInputRow\";\nimport {DarkStyleSwitch} from \"./DarkStyleSwitch\";\n\n\nfunction App() {\n  const [isDarkStyle, setIsDarkStyle] = useState(true)\n  const onToggle = useCallback(\n    () => setIsDarkStyle(!isDarkStyle),\n    [isDarkStyle, setIsDarkStyle]\n  )\n  \n  const [fieldInputValues, setFieldInputValues] = useState(DEFAULT_INPUT_VALUES)\n  const onChangeInput = useCallback((newValue, i) => {\n    const updatedFieldInputValues = [...fieldInputValues]\n    updatedFieldInputValues[i] = newValue\n    setFieldInputValues(updatedFieldInputValues)\n  }, [fieldInputValues, setFieldInputValues])\n  \n  const addNewInputField = useCallback(() => {\n    onChangeInput(DEFAULT_INPUT_VALUES[0], fieldInputValues.length)\n  }, [fieldInputValues])\n  \n  return (\n    <div style={{display: 'flex', justifyContent: 'center'}}>\n      <div className=\"App\">\n        <section className=\"field-inputs-section\">\n          <h2>1. Specify the fields you want in your popup:</h2>\n          <DarkStyleSwitch isDarkStyle={isDarkStyle} onToggle={onToggle}/>\n          {fieldInputValues.map((fieldInputValue, i) => (\n            <FieldInputRow\n              key={i}\n              onChange={newValue => onChangeInput(newValue, i)}\n              fieldInputValue={fieldInputValue}/>)\n          )}\n          <Button size=\"large\" onClick={addNewInputField}>Add another field <PlusCircleOutlined style={{color: 'skyblue'}}/></Button>\n        </section>\n        \n        <section>\n          <h2>2.</h2>\n          <GlowButton onClick={() => copyToClipboard(generatePopupHTML(fieldInputValues, isDarkStyle))}>\n            Copy popup HTML to clipboard!\n          </GlowButton>\n        </section>\n        \n        <section>\n          <h2>3. Paste into the CARTO custom HTML editor!</h2>\n          <p>See photo instructions below.\n            Most importantly, you need to toggle on all the fields you want displayed in the popup before going to the custom editor (toggling on all possible fields is the fool-proof way) <SmileOutlined rotate={180}/>\n          </p>\n          <img src=\"https://user-images.githubusercontent.com/6570507/78468037-3c929e80-76c8-11ea-8521-266ea1cbf47a.png\" alt=\"custom popup instructions\" style={{maxWidth: '100%'}}/>\n          <img src=\"https://user-images.githubusercontent.com/6570507/78468098-f853ce00-76c8-11ea-847e-77f23fc55cab.png\" alt=\"paste into editor\" style={{maxWidth: '100%'}}/>\n        </section>\n        \n        <p>Made with <HeartTwoTone style={{color: 'red'}} /> by David</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
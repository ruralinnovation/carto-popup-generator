{"version":3,"sources":["constants.js","htmlGenerators.js","GlowButton.js","FieldInputRow.js","App.js","serviceWorker.js","index.js"],"names":["FIELD_TYPES","DEFAULT_INPUT_VALUES","fieldType","fieldName","fieldDisplayName","generateNumericField","numericFieldsAccumulator","isScore","isText","fieldValueStyle","barStyle","scoreBar","GlowButton","children","onClick","className","type","FieldInputRow","fieldInputValue","onChange","style","display","padding","flex","addonBefore","placeholer","value","target","trim","defaultValue","Option","App","useState","slice","fieldInputValues","setFieldInputValues","onChangeInput","useCallback","newValue","i","updatedFieldInputValues","addNewInputField","length","justifyContent","map","key","size","PlusCircleOutlined","color","str","el","document","createElement","setAttribute","position","left","body","appendChild","select","execCommand","removeChild","copyToClipboard","fields","numericFields","reduce","generatePopupHTML","SmileOutlined","rotate","src","alt","maxWidth","HeartTwoTone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e056e4a9.chunk.js","sourcesContent":["export const FIELD_TYPES = {\n\tscoreOutOf100: 'Score (0 to 100)',\n\tnumber: 'Number',\n\ttext: 'Text'\n}\n\nexport const DEFAULT_INPUT_VALUES = [\n\t{\n\t\tfieldType: FIELD_TYPES.number,\n\t\tfieldName: 'total_staff_100k',\n\t\tfieldDisplayName: 'Staff per 100k',\n\t},\n\t{\n\t\tfieldType: FIELD_TYPES.scoreOutOf100,\n\t\tfieldName: 'prep_score_1',\n\t\tfieldDisplayName: 'County Preparedness Score (0-100)',\n\t},\n\t{\n\t\tfieldType: FIELD_TYPES.text,\n\t\tfieldName: 'prep_level',\n\t\tfieldDisplayName: 'Preparedness Level',\n\t},\n]\n","import {FIELD_TYPES} from \"./constants\";\n\n\nconst fieldValueStyle = (isText) => `\n        line-height: 1em;\n        font-size: ${isText ? '1.5em' : '3em'};\n      `\n\nconst barContainerStyle = () => `\n        width: 100%;\n        height: 12px;\n        border-radius: 4px;\n        background-color: rgba(10,10,10,0.1);\n      `\n\nconst barStyle = (fieldName) => `\n        border-radius: 4px;\n        height: 100%;\n        width: 0;\n        width: {{${fieldName}}}%;\n        transition: width 0.8s;\n        background-color: skyblue;\n      `\nconst scoreBar = fieldName => `\n\t\t\t<div style=\"${barContainerStyle()}\">\n        <div style=\"${barStyle(fieldName)}\"/>\n      </div>\n`\n\nconst generateNumericField = (numericFieldsAccumulator, {fieldName, fieldDisplayName, fieldType}) => {\n\tif (!fieldName || !fieldDisplayName || !fieldType) return numericFieldsAccumulator\n\t\n\tconst isScore = fieldType === FIELD_TYPES.scoreOutOf100\n\tconst isText = fieldType === FIELD_TYPES.text\n\treturn numericFieldsAccumulator + `\n    <li class=\"CDB-infowindow-listItem\" style=\"min-height: 70px;\">\n      <h5 class=\"CDB-infowindow-subtitle\">${fieldDisplayName}</h5>\n      <h4 class=\"CDB-infowindow-title\" style=\"${fieldValueStyle(isText)}\">{{${fieldName}}}</h4>\n      ${isScore ? scoreBar(fieldName) : ''}\n    </li>\n  `\n}\n\nexport const generatePopupHTML = (fields) => {\n\tconst numericFields = fields.reduce(generateNumericField, '')\n\treturn `\n    <div class=\"CDB-infowindow CDB-infowindow--light js-infowindow\">\n      <div class=\"CDB-infowindow-close js-close\"></div>\n      <div class=\"CDB-infowindow-container\">\n        <div class=\"CDB-infowindow-bg\">\n          <div class=\"CDB-infowindow-inner js-inner\">\n            <ul class=\"CDB-infowindow-list js-content\">\n                ${numericFields}\n            </ul>\n          </div>\n        </div>\n        <div class=\"CDB-hook\">\n          <div class=\"CDB-hook-inner\"></div>\n        </div>\n      </div>\n    </div>\n  `\n}\n\n\nexport const copyToClipboard = str => {\n\tconst el = document.createElement('textarea');\n\tel.value = str;\n\tel.setAttribute('readonly', '');\n\tel.style.position = 'absolute';\n\tel.style.left = '-9999px';\n\tdocument.body.appendChild(el);\n\tel.select();\n\tdocument.execCommand('copy');\n\tdocument.body.removeChild(el);\n};\n\n","import React from 'react'\n\nexport const GlowButton = ({children, onClick}) => (\n\t<button className=\"glow-on-hover\" type=\"button\" onClick={onClick}>{children}</button>\n)\n","import React from \"react\";\nimport {Input, Select} from \"antd\";\nimport {FIELD_TYPES} from \"./constants\";\n\n\nexport const FieldInputRow = ({fieldInputValue, onChange}) => {\n\treturn (\n\t\t<div className=\"field-input-container\" style={{display: 'flex', padding: 24}}>\n\t\t\t<Input\n\t\t\t\tstyle={{flex: 2}}\n\t\t\t\taddonBefore=\"Title\"\n\t\t\t\tplaceholer={\"eg The State Population in 2018\"}\n\t\t\t\tvalue={fieldInputValue.fieldDisplayName}\n\t\t\t\tonChange={({target}) => onChange({...fieldInputValue, fieldDisplayName: target.value})}\n\t\t\t/>\n\t\t\t\n\t\t\t<Input\n\t\t\t\tstyle={{flex: 2}}\n\t\t\t\taddonBefore=\"CARTO Field\"\n\t\t\t\tplaceholer={\"eg state_pop_2018\"}\n\t\t\t\tvalue={fieldInputValue.fieldName}\n\t\t\t\tonChange={({target}) => onChange({...fieldInputValue, fieldName: target.value.trim()})}\n\t\t\t/>\n\t\t\t\n\t\t\t<Select\n\t\t\t\tstyle={{flex: 1}}\n\t\t\t\tdefaultValue={fieldInputValue.fieldType}\n\t\t\t\tclassName=\"field-type\"\n\t\t\t\tonChange={(fieldType) => onChange({...fieldInputValue, fieldType})}\n\t\t\t>\n\t\t\t\t<Select.Option value={FIELD_TYPES.scoreOutOf100}>{FIELD_TYPES.scoreOutOf100}</Select.Option>\n\t\t\t\t<Select.Option value={FIELD_TYPES.number}>{FIELD_TYPES.number}</Select.Option>\n\t\t\t\t<Select.Option value={FIELD_TYPES.text}>{FIELD_TYPES.text}</Select.Option>\n\t\t\t</Select>\n\t\t</div>\n\t)\n}\n","import React, {useCallback, useState} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {copyToClipboard, generatePopupHTML} from \"./htmlGenerators\";\nimport {Button} from \"antd\";\nimport {HeartTwoTone, PlusCircleOutlined, SmileOutlined} from '@ant-design/icons';\nimport {GlowButton} from \"./GlowButton\";\nimport {DEFAULT_INPUT_VALUES} from \"./constants\";\nimport {FieldInputRow} from \"./FieldInputRow\";\n\n\nfunction App() {\n  \n  const [fieldInputValues, setFieldInputValues] = useState(DEFAULT_INPUT_VALUES.slice(1, 2))\n  const onChangeInput = useCallback((newValue, i) => {\n    const updatedFieldInputValues = [...fieldInputValues]\n    updatedFieldInputValues[i] = newValue\n    setFieldInputValues(updatedFieldInputValues)\n  }, [fieldInputValues, setFieldInputValues])\n  \n  const addNewInputField = useCallback(() => {\n    onChangeInput(DEFAULT_INPUT_VALUES[0], fieldInputValues.length)\n  }, [fieldInputValues])\n  \n  return (\n    <div style={{display: 'flex', justifyContent: 'center'}}>\n      <div className=\"App\">\n        <section className=\"field-inputs-section\">\n          <h2>1. Specify the fields you want in your popup:</h2>\n          {fieldInputValues.map((fieldInputValue, i) => (\n            <FieldInputRow\n              key={i}\n              onChange={newValue => onChangeInput(newValue, i)}\n              fieldInputValue={fieldInputValue}/>)\n          )}\n          <Button size=\"large\" onClick={addNewInputField}>Add another field <PlusCircleOutlined style={{color: 'skyblue'}}/></Button>\n        </section>\n        \n        <section>\n          <h2>2.</h2>\n          <GlowButton onClick={() => copyToClipboard(generatePopupHTML(fieldInputValues))}>\n            Copy popup HTML to clipboard!\n          </GlowButton>\n        </section>\n        \n        <section>\n          <h2>3. Paste into the CARTO custom HTML editor!</h2>\n          <p>Photo instructions below, you've got to do a few special things. <SmileOutlined rotate={180}/></p>\n          <img src=\"https://user-images.githubusercontent.com/6570507/78468037-3c929e80-76c8-11ea-8521-266ea1cbf47a.png\" alt=\"custom popup instructions\" style={{maxWidth: '100%'}}/>\n          <img src=\"https://user-images.githubusercontent.com/6570507/78468098-f853ce00-76c8-11ea-847e-77f23fc55cab.png\" alt=\"paste into editor\" style={{maxWidth: '100%'}}/>\n        </section>\n        \n        <p>Made with <HeartTwoTone style={{color: 'red'}} /> by David</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}